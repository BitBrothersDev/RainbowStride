<%= form_with(model: workout_plan, local: true, html: { class: 'needs-validation', novalidate: true }) do |form| %>
  <% if workout_plan.errors.any? %>
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      <h4 class="alert-heading"><%= pluralize(workout_plan.errors.count, "error") %> prohibited this workout_plan from being saved:</h4>
      <ul>
        <% workout_plan.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% end %>

  <div class="row">
    <div class="col-md-6">
      <div class="form-group">
        <%= form.label :title %>
        <%= form.text_field :title, class: 'form-control' %>
      </div>

      <div class="form-group">
        <%= form.label :duration %>
        <%= form.datetime_field :duration, class: 'form-control' %>
      </div>

      <div class="form-group">
        <%= label_tag :level_id, "Level" %>
        <%= form.select 'level_id', RainbowStride::Level.pluck(:name, :id), { prompt: 'Please select a level' }, { class: 'form-control', id: 'level-select' } %>
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <%= label_tag :selected_exercises, "Selected Exercises" %>
        <ul id="selected-exercises" class="list-group"></ul>
      </div>

      <div class="form-group" id="exercises-container">
        <% level = form.object.level %>
        <%= form.collection_check_boxes(:exercise_ids, level.exercises, :id, :name) do |exe| %>
            <%= exe.label(class: 'form-check-label') %>
            <%= exe.check_box(class: 'form-check-input') %>
        <% end %>
      </div>
    </div>
  </div>

  <div class="text-center mt-3">
    <%= form.submit 'Create Workout Plan', class: 'btn btn-primary' %>
  </div>
<% end %>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const exercisesContainer = document.getElementById('exercises-container');
        const exercisesChecks = exercisesContainer.querySelectorAll(".form-check");
        const selectedExercises = document.getElementById('selected-exercises');
        const levelSelect = document.getElementById('level-select');
        const selectedExerciseIds = <%= @workout_plan.exercise_ids.present? ? @workout_plan.exercise_ids.to_json.html_safe : '[]' %>;

        exercisesChecks.forEach(ele => ele.style.display = "none");

        if (selectedExerciseIds.length) {
            selectedExerciseIds.forEach(id => {
                const input = document.getElementById(`workout_plan_exercise_ids_${id}`);
                if (input) {
                    input.checked = true;
                    const exerciseCheckbox = document.getElementById(`workout_plan_exercise_ids_${id}`);
                    const levelId = exerciseCheckbox.closest('.form-check').dataset.levelId;
                    const levelLabel = document.querySelector(`#level-select option[value="${levelId}"]`).textContent;
                    addExerciseToList(id, exerciseCheckbox.nextElementSibling.textContent, levelLabel);
                }
            });
        }

        levelSelect.addEventListener('change', function() {
            const selectedLevelId = this.value;
            exercisesChecks.forEach(ele => ele.style.display = "none");
            const filteredExercises = exercisesContainer.querySelectorAll('.form-check[data-level-id="' + selectedLevelId + '"]');
            filteredExercises.forEach(ele => ele.style.display = "block");
        });

        exercisesContainer.addEventListener('change', (e) => {
            if (e.target.tagName === 'INPUT') {
                const exerciseId = e.target.value;
                const exerciseLabel = document.querySelector(`label[for="${e.target.id}"]`).textContent;
                const levelId = event.target.closest('.form-check').dataset.levelId;
                const levelLabel = document.querySelector(`#level-select option[value="${levelId}"]`).textContent;

                if (e.target.checked) {
                    addExerciseToList(exerciseId, exerciseLabel, levelLabel);
                } else {
                    const listItem = selectedExercises.querySelector(`[data-exercise-id="${exerciseId}"]`);
                    selectedExercises.removeChild(listItem);
                }
            }
        });

        function addExerciseToList(exerciseId, exerciseLabel, levelLabel) {
            const listItem = document.createElement('li');
            listItem.classList.add('list-group-item');
            listItem.dataset.exerciseId = exerciseId;
            listItem.textContent = `${exerciseLabel} (${levelLabel})`;
            selectedExercises.appendChild(listItem);
        }
    });
</script>
