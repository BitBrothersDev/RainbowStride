<%= javascript_include_tag 'snap.svg-min' %>
<h1>Measure yourself</h1>

<!--<form id="user-data-form">-->
<!--  <input type="number" id="weight" placeholder="Weight">-->
<!--  <input type="number" id="height" placeholder="Height">-->
<!--  <input type="number" id="stomach_size" placeholder="Stomach Size">-->
<!--  <button type="button" onclick="generateSVG()">Generate</button>-->
<!--</form>-->

<div class="col-md-12">
  <div class="row">
    <div class="col-md-6">
      <h3>Measurements</h3>

      <% @measurements.each do |type, measurements| %>
        <h4><%= type&.name %></h4>
        <table class="table table-bordered">
          <thead>
          <tr>
            <th>Date</th>
            <th>Value</th>
            <th>Actions</th>
          </tr>
          </thead>
          <tbody>
          <% measurements.each do |measurement| %>
            <tr>
              <td><%= measurement.date %></td>
              <td><%= measurement.value %></td>
              <td>
                <%= link_to 'Show', measurement %> |
                <%= link_to 'Edit', edit_measurement_path(measurement) %> |
                <%= button_to 'Destroy', measurement, method: :delete, data: { 'turbo': false, confirm: 'Are you sure?' } %>
              </td>
            </tr>
          <% end %>
          </tbody>
        </table>
      <% end %>

    </div>
    <div class="col-md-6">
      <button id="toggleButton">Toggle Front/Back</button>

      <div class="svg-preview d-flex justify-content-center">
        <%= render 'rainbow_stride/home/svg/man_body_svg' %>
      </div>

      <%= form_with url: measurements_path, method: :post, id: "hidden-measurement-form" do |form| %>
        <%= form.hidden_field :measurement_type, name: "measurement[measurement_type]", id: "hidden-measurement-type" %>
        <%= form.hidden_field :value, name: "measurement[value]", id: "hidden-measurement-value" %>
        <%= form.hidden_field :date, name: "measurement[date]", id: "hidden-measurement-date" %>
      <% end %>
    </div>
  </div>
</div>
<!--<svg id="svg-container"></svg>-->

<script>

  document.getElementById('toggleButton').addEventListener('click', function() {
    var frontBody = document.getElementById('man-body-front');
    var backBody = document.getElementById('man-body-back');

    if (frontBody.style.display !== 'none') {
      frontBody.style.display = 'none';
      backBody.style.display = 'block';
    } else {
      frontBody.style.display = 'block';
      backBody.style.display = 'none';
    }
  });


  function generateSVG() {
    const htmlSvgElements = document.getElementsByClassName("body-map__body");

    Array.from(htmlSvgElements).forEach((htmlSvgElement) => {
      const snapSvg = Snap(htmlSvgElement);

      // const paths = snapSvg.selectAll(".body-map__muscle");

      function onMouseOver() {
        this.attr({ fill: "red" });
      }

      function onMouseOut() {
        this.attr({ fill: "blue" });
      }
      const groups = snapSvg.selectAll(".body-map__muscle");

      groups.forEach((group) => {
        group.hover(onGroupMouseOver, onGroupMouseOut);

        // Select all paths inside this group
        const paths = group.selectAll('path');

        function submitFormAndDisplayValue(path, measurementType, value) {
          const date = new Date().toISOString().slice(0, 10);

          // Set the form values
          document.getElementById('hidden-measurement-type').value = measurementType;
          document.getElementById('hidden-measurement-value').value = value;
          document.getElementById('hidden-measurement-date').value = date;

          // Submit the form
          document.getElementById('hidden-measurement-form').submit();

          // Loop over all paths inside the group of the clicked path
          path.parent().selectAll('path').forEach((path) => {
            // Display the value in the center of each path
            const bbox = path.getBBox();
            const text = Snap().text(bbox.cx, bbox.cy, value).attr({
              fill: '#000', // text color
              fontSize: '20px' // text size
            });
            // Append the text element to the same group as the path element
            path.parent().append(text);
          });
        }

        paths.forEach((path) => {
          path.click(function (e) {
            debugger
            const measure_type = this.node.getAttribute('data-measuretype') || 'Path'; // Use a default name if not set
            const value = prompt("Enter a value for " + measure_type);
            if (value !== null) {
              submitFormAndDisplayValue(this, measure_type, value);
            }
          });
        });
      });

      function onGroupMouseOver() {
        // Select all paths inside this group
        let paths = this.selectAll('path');
        paths.forEach((path) => {
          onMouseOver.apply(path); // Apply the onMouseOver function on each path
        });
      }

      function onGroupMouseOut() {
        // Select all paths inside this group
        let paths = this.selectAll('path');
        paths.forEach((path) => {
          onMouseOut.apply(path); // Apply the onMouseOut function on each path
        });
      }
    });
  }

  // Call generateSVG() function after the page has loaded
  window.addEventListener('DOMContentLoaded', generateSVG);
</script>
